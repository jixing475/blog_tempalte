[
  {
    "path": "posts/2020-12-31-using-tidyverse-with-dbs-partiii/",
    "title": "Using the tidyverse with Databases - Part III",
    "description": "Setting up, and connecting to a Star Wars MySQL Database",
    "author": [
      {
        "name": "Vebash Naidoo",
        "url": "https://twitter.com/Sciencificity"
      }
    ],
    "date": "2020-12-31",
    "categories": [
      "SQL",
      "databases",
      "tidyverse",
      "dbplyr",
      "MySQL",
      "MariaDB"
    ],
    "contents": "\r\n\r\nContents\r\nRecapPart I\r\nPart II\r\n\r\nWhat are we tackling in Part III?\r\nSetup a MySQL DBCreate a local MySQL instance\r\nOur data\r\nCreate some tables\r\n\r\nConnections PaneMake a connectionODBC\r\nAppropriate DBI-compliant package\r\n\r\nWriting to a MySQL Database from RStudio\r\n\r\nCommunicate with our MySQL DatabaseConnect\r\nTake a look around\r\nExplore data\r\nDone? Remember to disconnect!\r\nFin\r\n\r\nAcknowledgements\r\nMore resources\r\n\r\n\r\n\r\n\r\n\r\nblockquote {\r\n  background: #f9f9f9;\r\n  border-left: 10px solid #ccc;\r\n  margin: 1.5em 10px;\r\n  padding: 0.5em 10px;\r\n  quotes: \"\\201C\"\"\\201D\"\"\\2018\"\"\\2019\";\r\n}\r\nblockquote:before {\r\n  color: #ccc;\r\n  content: open-quote;\r\n  font-size: 4em;\r\n  line-height: 0.1em;\r\n  margin-right: 0.25em;\r\n  vertical-align: -0.4em;\r\n}\r\n# blockquote:after {\r\n#   color: #ccc;\r\n#   content:\"\\201D\";\r\n#   font-size: 4em;\r\n#   line-height: 0.1em;\r\n#   margin-right: 0.25em;\r\n#   vertical-align: -0.4em;\r\n# }\r\nblockquote p {\r\n  display: inline;\r\n}\r\n\r\n\r\nWhen gone am I, the last of the Jedi will you be. The Force runs strong in your family. Pass on what you have learned.\r\n\r\n\r\n‚Äî Yoda\r\n\r\nPhoto by Marija Zaric on Unsplash\r\nRecap\r\nPart I\r\nIn Part I we made a connection to a SQLite Database (DB).\r\nPart II\r\nIn Part II we progressed a bit further, with more in-depth {dplyr} workflows, and we also brought the data into R after doing most of the computation on the database itself.\r\nWhat are we tackling in Part III?\r\nWe‚Äôre going to:\r\nDo a quick run through of setting up a MySQL database.\r\nConnect to the database using the Connections Pane in RStudio, which is essentially a connection using an ODBC Driver.\r\nLeverage the MySQL DBMS to do the computation of the query on the database, instead of in R, bringing the aggregated data into R when needed. We will collect() (i.e.¬†bring data into R when we‚Äôre using functions that need the full dataset, not the ‚Äúlazy result‚Äù).\r\nFor visualisations using ggplot.\r\nSome functions only work on data in a dataframe like structure, and can‚Äôt work with the ‚Äúlazy query‚Äù result. We will need to collect() the data in this case to proceed with our data pipeline e.g.¬†pivot_longer() as we will see later.\r\n\r\ncollecting data is when we bring the data into R. If you recall in the Part II post we pulled data into R when we had our aggregated data computed via a query we ran in the DBMS itself.\r\nThe project on GitHub, has the code to setup the tables in the MySQL DB from R.\r\nSetup a MySQL DB\r\nWe‚Äôre going to set-up a local MySQL DB.\r\nWe‚Äôre going to use {dplyr}‚Äôs starwars dataset.\r\nWe‚Äôll supplement this with survey data from a TidyTuesday dataset back in 2018, as well as some information on the franchise revenue also from TidyTuesday.\r\nCreate a local MySQL instance\r\nGo to the MySQL page to download the appropriate server for you. I am on a Windows machine so I used the MySQL Installer for Windows.\r\nRun through the setup.\r\nFollow the setup steps - I installed a ‚ÄúFull version‚Äù.\r\nIf you did not create your ‚Äúroot‚Äù user during the setup process (this happened to me), open the MySQL Installer from your machine‚Äôs Startup Menu.\r\nClick Reconfigure next to MySQL Server.\r\n\r\nCheck Show Advanced and Logging Options.\r\nClick Next > to navigate the setup, which will ask you to setup a password for root.\r\n\r\n\r\nI opened MySQL Workbench and setup a user named admin, after connecting to the local host. It is good practise to keep your root user aside for security reasons, therefore creating other profiles to access the DB is advised.\r\nI created a ‚Äúschema‚Äù by clicking on the little Database icon in MySQL Workbench\r\nLink is ‚ÄúCreate a new schema in the connected server‚Äù.\r\n\r\nAlternately in the MySQL Command Line Client run:\r\nCREATE DATABASE starwars CHARACTER SET utf8 COLLATE utf8_unicode_ci;\r\nThat‚Äôs it for the MySQL DBMS itself, the rest of the work for setting up our DB will be done in R.\r\nOur data\r\nIn the {dplyr} üì¶ we have a dataset starwars which has information for the characters.\r\n\r\n\r\n# need to figure out what data is included\r\n# in a package? \r\n# Call data(package = \"pkg_name\")\r\n# which gives you a nice list of included datasets\r\ndata(package = \"dplyr\")\r\n\r\n\r\n\r\n\r\nLet‚Äôs have a squizz at the starwars dataset.\r\n\r\n\r\nstarwars\r\n\r\n\r\n# A tibble: 87 x 14\r\n   name  height  mass hair_color skin_color eye_color birth_year sex  \r\n   <chr>  <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr>\r\n 1 Luke~    172    77 blond      fair       blue            19   male \r\n 2 C-3PO    167    75 <NA>       gold       yellow         112   none \r\n 3 R2-D2     96    32 <NA>       white, bl~ red             33   none \r\n 4 Dart~    202   136 none       white      yellow          41.9 male \r\n 5 Leia~    150    49 brown      light      brown           19   fema~\r\n 6 Owen~    178   120 brown, gr~ light      blue            52   male \r\n 7 Beru~    165    75 brown      light      blue            47   fema~\r\n 8 R5-D4     97    32 <NA>       white, red red             NA   none \r\n 9 Bigg~    183    84 black      light      brown           24   male \r\n10 Obi-~    182    77 auburn, w~ fair       blue-gray       57   male \r\n# ... with 77 more rows, and 6 more variables: gender <chr>,\r\n#   homeworld <chr>, species <chr>, films <list>, vehicles <list>,\r\n#   starships <list>\r\n\r\nI broke this dataset apart to create different tables containing subsets of the information so we can practise on:\r\nfilms: contains information on the movies.\r\nvehicles: contains a listing on the vehicles in the movies.\r\nstarships: contains a listing for the starships in the movies.\r\nappearances: which has a listing of each character against the film they appeared in.\r\nvehicles_piloted: has a listing of each character against the vehicle they drove.\r\nstarships_piloted: has a listing of each character against the starship they piloted.\r\ncharacters: has information on each character for example their height, mass etc.\r\nsurvey: contains information from a survey run on the popularity of the Star Wars movies, characters etc.\r\nsurvey_levels: contains an id per character level rating e.g.¬†Very unfavorably was coded as 1.\r\nfranchise: contains the revenue of the franchise across different media - e.g.¬†how much revenue comes from movies, merchandise etc.\r\n\r\n\r\nhtml {\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\r\n}\r\n\r\n#qzobhueiin .gt_table {\r\n  display: table;\r\n  border-collapse: collapse;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  color: #333333;\r\n  font-size: 16px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  background-color: #FFFFFF;\r\n  width: auto;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #A8A8A8;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #A8A8A8;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n}\r\n\r\n#qzobhueiin .gt_heading {\r\n  background-color: #FFFFFF;\r\n  text-align: center;\r\n  border-bottom-color: #FFFFFF;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#qzobhueiin .gt_title {\r\n  color: #333333;\r\n  font-size: 125%;\r\n  font-weight: initial;\r\n  padding-top: 4px;\r\n  padding-bottom: 4px;\r\n  border-bottom-color: #FFFFFF;\r\n  border-bottom-width: 0;\r\n}\r\n\r\n#qzobhueiin .gt_subtitle {\r\n  color: #333333;\r\n  font-size: 85%;\r\n  font-weight: initial;\r\n  padding-top: 0;\r\n  padding-bottom: 4px;\r\n  border-top-color: #FFFFFF;\r\n  border-top-width: 0;\r\n}\r\n\r\n#qzobhueiin .gt_bottom_border {\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n}\r\n\r\n#qzobhueiin .gt_col_headings {\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#qzobhueiin .gt_col_heading {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: normal;\r\n  text-transform: inherit;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: bottom;\r\n  padding-top: 5px;\r\n  padding-bottom: 6px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  overflow-x: hidden;\r\n}\r\n\r\n#qzobhueiin .gt_column_spanner_outer {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: normal;\r\n  text-transform: inherit;\r\n  padding-top: 0;\r\n  padding-bottom: 0;\r\n  padding-left: 4px;\r\n  padding-right: 4px;\r\n}\r\n\r\n#qzobhueiin .gt_column_spanner_outer:first-child {\r\n  padding-left: 0;\r\n}\r\n\r\n#qzobhueiin .gt_column_spanner_outer:last-child {\r\n  padding-right: 0;\r\n}\r\n\r\n#qzobhueiin .gt_column_spanner {\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  vertical-align: bottom;\r\n  padding-top: 5px;\r\n  padding-bottom: 6px;\r\n  overflow-x: hidden;\r\n  display: inline-block;\r\n  width: 100%;\r\n}\r\n\r\n#qzobhueiin .gt_group_heading {\r\n  padding: 8px;\r\n  color: #333333;\r\n  background-color: #ADEFD1FF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  text-transform: inherit;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: middle;\r\n}\r\n\r\n#qzobhueiin .gt_empty_group_heading {\r\n  padding: 0.5px;\r\n  color: #333333;\r\n  background-color: #ADEFD1FF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  vertical-align: middle;\r\n}\r\n\r\n#qzobhueiin .gt_from_md > :first-child {\r\n  margin-top: 0;\r\n}\r\n\r\n#qzobhueiin .gt_from_md > :last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n#qzobhueiin .gt_row {\r\n  padding-top: 3px;\r\n  padding-bottom: 3px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  margin: 10px;\r\n  border-top-style: solid;\r\n  border-top-width: 1px;\r\n  border-top-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: middle;\r\n  overflow-x: hidden;\r\n}\r\n\r\n#qzobhueiin .gt_stub {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  text-transform: inherit;\r\n  border-right-style: solid;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n  padding-left: 12px;\r\n}\r\n\r\n#qzobhueiin .gt_summary_row {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  text-transform: inherit;\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n}\r\n\r\n#qzobhueiin .gt_first_summary_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n}\r\n\r\n#qzobhueiin .gt_grand_summary_row {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  text-transform: inherit;\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n}\r\n\r\n#qzobhueiin .gt_first_grand_summary_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  border-top-style: double;\r\n  border-top-width: 6px;\r\n  border-top-color: #D3D3D3;\r\n}\r\n\r\n#qzobhueiin .gt_striped {\r\n  background-color: rgba(128, 128, 128, 0.05);\r\n}\r\n\r\n#qzobhueiin .gt_table_body {\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n}\r\n\r\n#qzobhueiin .gt_footnotes {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  border-bottom-style: none;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#qzobhueiin .gt_footnote {\r\n  margin: 0px;\r\n  font-size: 90%;\r\n  padding: 4px;\r\n}\r\n\r\n#qzobhueiin .gt_sourcenotes {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  border-bottom-style: none;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#qzobhueiin .gt_sourcenote {\r\n  font-size: 90%;\r\n  padding: 4px;\r\n}\r\n\r\n#qzobhueiin .gt_left {\r\n  text-align: left;\r\n}\r\n\r\n#qzobhueiin .gt_center {\r\n  text-align: center;\r\n}\r\n\r\n#qzobhueiin .gt_right {\r\n  text-align: right;\r\n  font-variant-numeric: tabular-nums;\r\n}\r\n\r\n#qzobhueiin .gt_font_normal {\r\n  font-weight: normal;\r\n}\r\n\r\n#qzobhueiin .gt_font_bold {\r\n  font-weight: bold;\r\n}\r\n\r\n#qzobhueiin .gt_font_italic {\r\n  font-style: italic;\r\n}\r\n\r\n#qzobhueiin .gt_super {\r\n  font-size: 65%;\r\n}\r\n\r\n#qzobhueiin .gt_footnote_marks {\r\n  font-style: italic;\r\n  font-size: 65%;\r\n}\r\nData Dictionary for the Star Wars Database\r\n    \r\n    \r\n      Field Type\r\n      Notes\r\n    films\r\n    id\r\n      integer\r\n      Identification field for the film e.g. 5\r\n    films\r\n      string\r\n      Movie Name e.g. \"The Empire Strikes Back\"\r\n    year\r\n      double\r\n      Year movie was released e.g. 1980\r\n    vehicles\r\n    id\r\n      integer\r\n      Identification field for the vehicle e.g. 3\r\n    vehicles\r\n      string\r\n      Name of vehicle e.g. \"Tribubble bongo\"\r\n    starships\r\n    id\r\n      integer\r\n      Identification field for the starship e.g. 10\r\n    starships\r\n      string\r\n      Name of starship e.g. \"Millennium Falcon\"\r\n    characters\r\n    name\r\n      string\r\n      Character Name e.g. Leia Organa\r\n    height\r\n      integer\r\n      Height of character\r\n    mass\r\n      double\r\n      Mass of character\r\n    hair_color\r\n      string\r\n      Hair Color of character\r\n    skin_color\r\n      string\r\n      Skin Color of character\r\n    eye_color\r\n      string\r\n      Eye Color of character\r\n    birth_year\r\n      double\r\n      Birth Year of character\r\n    sex\r\n      string\r\n      Sex of character\r\n    gender\r\n      string\r\n      Gender of character\r\n    homeworld\r\n      string\r\n      Homeworld of character\r\n    species\r\n      string\r\n      Species of character\r\n    appearances\r\n    film_id\r\n      integer\r\n      Link into the films table, e.g. 4 (denoting character appeared in \"A New Hope\")\r\n    name\r\n      string\r\n      Character Name e.g. Leia Organa\r\n    vehicles_piloted\r\n    vehicle_id\r\n      integer\r\n      Link into the vehicles table, e.g. 3 (denoting character drove a \"Tribubble bongo\")\r\n    name\r\n      string\r\n      Character Name e.g. Obi-Wan Kenobi\r\n    starships_piloted\r\n    starship_id\r\n      integer\r\n      Link into the starships table, e.g. 10 (denoting character piloted a \"Millennium Falcon\")\r\n    name\r\n      string\r\n      Character Name e.g. Chewbacca\r\n    survey_levels\r\n    id\r\n      integer\r\n      Identification for the survey response e.g. 1\r\n    level\r\n      string\r\n      The survey response e.g. \"Very unfavorably\"\r\n    survey\r\n    respondent_id\r\n      integer\r\n      Identification for the survey respondent e.g. 3292879998\r\n    any_of_6\r\n      string\r\n      Did respondent watch any of the 6 movies? (Original 6 before reboot) - e.g. Yes, No\r\n    star_wars_fan\r\n      string\r\n      Is the respondent a star wars fan? - e.g. Yes, No\r\n    watched_The Phantom Menace\r\n      string\r\n      Did the respondent watch said movie? - e.g. Yes, No\r\n    watched_A New Hope\r\n      string\r\n      Did the respondent watch said movie? - e.g. Yes, No\r\n    watched_Attack of the Clones\r\n      string\r\n      Did the respondent watch said movie? - e.g. Yes, No\r\n    watched_Return of the Jedi\r\n      string\r\n      Did the respondent watch said movie? - e.g. Yes, No\r\n    watched_Revenge of the Sith\r\n      string\r\n      Did the respondent watch said movie? - e.g. Yes, No\r\n    watched_The Empire Strikes Back\r\n      string\r\n      Did the respondent watch said movie? - e.g. Yes, No\r\n    rank_A New Hope\r\n      double\r\n      How does the respondent rank the movie? 1=Best, 6 =Worst\r\n    rank_Attack of the Clones\r\n      double\r\n      How does the respondent rank the movie? 1=Best, 6 =Worst\r\n    rank_Return of the Jedi\r\n      double\r\n      How does the respondent rank the movie? 1=Best, 6 =Worst\r\n    rank_Revenge of the Sith\r\n      double\r\n      How does the respondent rank the movie? 1=Best, 6 =Worst\r\n    rank_The Empire Strikes Back\r\n      double\r\n      How does the respondent rank the movie? 1=Best, 6 =Worst\r\n    rank_The Phantom Menace\r\n      double\r\n      How does the respondent rank the movie? 1=Best, 6 =Worst\r\n    `Han Solo`\r\n      integer\r\n      Link into survey_levels table where 5 = Very favorably\r\n    `Luke Skywalker`\r\n      integer\r\n      Link into survey_levels table where 5 = Very favorably\r\n    `Leia Organa`\r\n      integer\r\n      Link into survey_levels table where 5 = Very favorably\r\n    `Anakin Skywalker`\r\n      integer\r\n      Link into survey_levels table where 5 = Very favorably\r\n    `Obi-Wan Kenobi`\r\n      integer\r\n      Link into survey_levels table where 5 = Very favorably\r\n    `Palpatine`\r\n      integer\r\n      Link into survey_levels table where 5 = Very favorably\r\n    `Darth Vader`\r\n      integer\r\n      Link into survey_levels table where 5 = Very favorably\r\n    `Lando Calrissian`\r\n      integer\r\n      Link into survey_levels table where 5 = Very favorably\r\n    `Boba Fett`\r\n      integer\r\n      Link into survey_levels table where 5 = Very favorably\r\n    `C-3P0`\r\n      integer\r\n      Link into survey_levels table where 5 = Very favorably\r\n    `R2-D2`\r\n      integer\r\n      Link into survey_levels table where 5 = Very favorably\r\n    `Jar Jar Binks`\r\n      integer\r\n      Link into survey_levels table where 5 = Very favorably\r\n    `Padme Amidala`\r\n      integer\r\n      Link into survey_levels table where 5 = Very favorably\r\n    `Yoda`\r\n      integer\r\n      Link into survey_levels table where 5 = Very favorably\r\n    who_shot_first\r\n      string\r\n      Han, Greedo, or \"I don't understand the question\"\r\n    know_expanded_universe\r\n      string\r\n      Does respondent know the expanded universe? Yes / No\r\n    fan_expanded_universe\r\n      string\r\n      Does respondent like the expanded universe? Yes / No\r\n    trekkie\r\n      string\r\n      Is respondent a Star Trek fan? Yes / No\r\n    Gender\r\n      string\r\n      Gender e.g. Male\r\n    Age\r\n      string\r\n      Age range e.g. 30-44\r\n    Household Income\r\n      string\r\n      Income range e.g. $50,000 - $99,999\r\n    Education\r\n      string\r\n      Education level e.g. Some college or Associate degree\r\n    Location (Census Region)\r\n      string\r\n      Location of respondent e.g. East South Central\r\n    franchise\r\n    franchise\r\n      string\r\n      Star Wars\r\n    revenue_category\r\n      string\r\n      Category of revenue generation e.g. Book sales\r\n    revenue_billion_dollars\r\n      double\r\n      Revenue earned from category, in billions of dollars\r\n    year_created\r\n      double\r\n      Year the franchise was created\r\n    original_media\r\n      string\r\n      Original media the franchise was released on e.g. Book, Film\r\n    creators\r\n      string\r\n      Who created the franchise\r\n    owners\r\n      string\r\n      The owners of the franchise\r\n    \r\n\r\nCreate some tables\r\nHere‚Äôs an example of how I created the films, and the associated appearances tables.\r\n\r\n\r\n(films <- starwars %>%  \r\n  # get the films column which contains lists of values\r\n  select(films) %>% \r\n  # flatten the films list - this will create multiple rows for\r\n  # each film in the list\r\n  unnest(films) %>% \r\n  # get rid of duplicates\r\n  distinct() )\r\n\r\n\r\n# A tibble: 7 x 1\r\n  films                  \r\n  <chr>                  \r\n1 The Empire Strikes Back\r\n2 Revenge of the Sith    \r\n3 Return of the Jedi     \r\n4 A New Hope             \r\n5 The Force Awakens      \r\n6 Attack of the Clones   \r\n7 The Phantom Menace     \r\n\r\nfilm_years <- tribble(~name,      ~year,\r\n        #------------------------#------\r\n        \"The Empire Strikes Back\", 1980,\r\n        \"Revenge of the Sith\"    , 2005,\r\n        \"Return of the Jedi\"     , 1983,\r\n        \"A New Hope\"             , 1977,\r\n        \"The Force Awakens\"      , 2015,\r\n        \"Attack of the Clones\"   , 2002,\r\n        \"The Phantom Menace\"     , 1999)\r\n\r\nfilms <- films %>% \r\n  # Join the tables to tag on the `year` column\r\n  inner_join(film_years,\r\n             # left table column = films, right table column = name\r\n             by = c(\"films\" = \"name\"))\r\n\r\n# Order of films in terms of episodes, not release date\r\n# We're going to use this to create a factor\r\nfilm_levels <- c(\"The Phantom Menace\", \"Attack of the Clones\", \"Revenge of the Sith\",\r\n                 \"A New Hope\", \"The Empire Strikes Back\", \"Return of the Jedi\",\r\n                 \"The Force Awakens\")\r\n(films <- films %>% \r\n  # make \"films\" a factor using the film_levels we created above\r\n  # this will ensure the id = 4 is associated to 'A New Hope'\r\n  mutate(films = factor(films, film_levels),) %>% \r\n  # create an id column - we will use this later\r\n  # the .before just says I want the id column to come before the films column\r\n  mutate(id = as.integer(films), .before = \"films\") %>% \r\n  arrange(id))\r\n\r\n\r\n# A tibble: 7 x 3\r\n     id films                    year\r\n  <int> <fct>                   <dbl>\r\n1     1 The Phantom Menace       1999\r\n2     2 Attack of the Clones     2002\r\n3     3 Revenge of the Sith      2005\r\n4     4 A New Hope               1977\r\n5     5 The Empire Strikes Back  1980\r\n6     6 Return of the Jedi       1983\r\n7     7 The Force Awakens        2015\r\n\r\n(appearances <- starwars %>% \r\n  # let's save the characters appearances in the movies\r\n  select(name, films) %>% \r\n  # we end up with {character_name, film} for every film the character appears in\r\n  unnest(films) %>%\r\n  # join it with our new films table\r\n  inner_join(films) %>% \r\n  # select the id which we rename to film_id, and then the name of the character\r\n  select(film_id = id, name))\r\n\r\n\r\n# A tibble: 173 x 2\r\n   film_id name          \r\n     <int> <chr>         \r\n 1       5 Luke Skywalker\r\n 2       3 Luke Skywalker\r\n 3       6 Luke Skywalker\r\n 4       4 Luke Skywalker\r\n 5       7 Luke Skywalker\r\n 6       5 C-3PO         \r\n 7       2 C-3PO         \r\n 8       1 C-3PO         \r\n 9       3 C-3PO         \r\n10       6 C-3PO         \r\n# ... with 163 more rows\r\n\r\nIf you‚Äôd like to follow along the RMarkdown file with all the code is here.\r\nConnections Pane\r\nIn RStudio there is a Connections Pane.\r\nCreate a New Connection.\r\nChoose an appropriate driver (e.g.¬†I chose MySQL ODBC 8.0 Unicode Driver).\r\nIf you struggle to figure out the parameters needed in the Popup window provided, the connectionstrings website is a great help.\r\nChoose the DBMS you‚Äôre working with - in this case MySQL.\r\nCopy the connection string - in this case I used the TCP Port string.\r\n\r\nCopy the connection string as per the connection strings website and paste it in the Parameters field. Amend the parameters such as user name, password etc. as per your instance. If you‚Äôre using a corporate database, you need to use the IP Address provided by your Database Administrator as Server, same for your credentials etc.\r\nTest the connection.\r\nCopy the full string into the console / script you‚Äôre working in.\r\n\r\nMake a connection\r\nODBC\r\nWe use the connection string generated via the Connections Pane to connect to our MySQL DB, and write our data frames into database tables.\r\n\r\n\r\n# Load libraries\r\nlibrary(DBI)\r\n# Make a connection\r\ncon <- dbConnect(odbc::odbc(), \r\n  .connection_string = \"Driver={MySQL ODBC 8.0 Unicode Driver};\r\n      Server=localhost;\r\n      Port=3306;\r\n      Database=starwars;\r\n      Uid=admin;\r\n      Pwd=Luke1@my0urf@ther;\", \r\n    timeout = 10)\r\n\r\n\r\n\r\nAppropriate DBI-compliant package\r\nWe may alternatively use the appropriate DBI compliant package. (RMariaDB::MariaDB()).\r\n\r\nDBI is the DataBase Interface üì¶ for R. Instead of using an ODBC driver we may use one of the DBI compliant packages created by the R community to make a connection. In the case of MySQL we use RMariaDB üì¶\r\n\r\n\r\n# Make a connection\r\ncon <- dbConnect(drv = RMariaDB::MariaDB(), \r\n                 host = \"localhost\", \r\n                 port = \"3306\",\r\n                 user = \"admin\", \r\n                 password = \"Luke1@my0urf@ther\",\r\n                 dbname = \"starwars\")\r\n# Good housekeeping means disconnect\r\ndbDisconnect(con)\r\n\r\n\r\n\r\nWriting to a MySQL Database from RStudio\r\nOnce we have connected to the database, we‚Äôre ready to write our data frames into tables in the DBMS.\r\n\r\n\r\n# Write data frames we created to actual tables in the database\r\nDBI::dbWriteTable(conn = con, \r\n                  \"films\", # name of table in database\r\n                  films,   # the data frame\r\n                  overwrite = TRUE) # if table exists overwrite it with this data\r\nDBI::dbWriteTable(conn = con, \"appearances\",\r\n                  appearances, overwrite = TRUE)\r\n# Good housekeeping means disconnect\r\ndbDisconnect(con)\r\n\r\n\r\n\r\nCommunicate with our MySQL Database\r\nAlright, we‚Äôre all set now. We can now start to query our database tables in our MySQL DBMS.\r\nConnect\r\nAs before the first step is connecting.\r\n\r\n\r\n# Load libraries\r\nlibrary(DBI)\r\n# Make a connection\r\ncon <- dbConnect(odbc::odbc(), \r\n  .connection_string = \"Driver={MySQL ODBC 8.0 Unicode Driver};\r\n      Server=localhost;\r\n      Port=3306;\r\n      Database=starwars;\r\n      Uid=admin;\r\n      Pwd=Luke1@my0urf@ther;\", \r\n    timeout = 10)\r\ndbListTables(con)\r\n\r\n\r\n [1] \"appearances\"       \"characters\"        \"films\"            \r\n [4] \"franchise\"         \"starships\"         \"starships_piloted\"\r\n [7] \"survey\"            \"survey_levels\"     \"vehicles\"         \r\n[10] \"vehicles_piloted\" \r\n\r\ndbListFields(con, \"characters\")\r\n\r\n\r\n [1] \"name\"       \"height\"     \"mass\"       \"hair_color\" \"skin_color\"\r\n [6] \"eye_color\"  \"birth_year\" \"sex\"        \"gender\"     \"homeworld\" \r\n[11] \"species\"   \r\n\r\nTake a look around\r\nLet‚Äôs get familiar with our data.\r\n\r\n\r\ntbl(con, \"characters\")\r\n\r\n\r\n# Source:   table<characters> [?? x 11]\r\n# Database: mysql [admin@:/starwars]\r\n   name  height  mass hair_color skin_color eye_color birth_year sex  \r\n   <chr>  <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr>\r\n 1 Luke~    172    77 blond      fair       blue            19   male \r\n 2 C-3PO    167    75 <NA>       gold       yellow         112   none \r\n 3 R2-D2     96    32 <NA>       white, bl~ red             33   none \r\n 4 Dart~    202   136 none       white      yellow          41.9 male \r\n 5 Leia~    150    49 brown      light      brown           19   fema~\r\n 6 Owen~    178   120 brown, gr~ light      blue            52   male \r\n 7 Beru~    165    75 brown      light      blue            47   fema~\r\n 8 R5-D4     97    32 <NA>       white, red red             NA   none \r\n 9 Bigg~    183    84 black      light      brown           24   male \r\n10 Obi-~    182    77 auburn, w~ fair       blue-gray       57   male \r\n# ... with more rows, and 3 more variables: gender <chr>,\r\n#   homeworld <chr>, species <chr>\r\n\r\ntbl(con, \"films\")\r\n\r\n\r\n# Source:   table<films> [?? x 3]\r\n# Database: mysql [admin@:/starwars]\r\n     id films                    year\r\n  <int> <chr>                   <dbl>\r\n1     1 The Phantom Menace       1999\r\n2     2 Attack of the Clones     2002\r\n3     3 Revenge of the Sith      2005\r\n4     4 A New Hope               1977\r\n5     5 The Empire Strikes Back  1980\r\n6     6 Return of the Jedi       1983\r\n7     7 The Force Awakens        2015\r\n\r\ntbl(con, \"appearances\")\r\n\r\n\r\n# Source:   table<appearances> [?? x 2]\r\n# Database: mysql [admin@:/starwars]\r\n   film_id name          \r\n     <int> <chr>         \r\n 1       5 Luke Skywalker\r\n 2       3 Luke Skywalker\r\n 3       6 Luke Skywalker\r\n 4       4 Luke Skywalker\r\n 5       7 Luke Skywalker\r\n 6       5 C-3PO         \r\n 7       2 C-3PO         \r\n 8       1 C-3PO         \r\n 9       3 C-3PO         \r\n10       6 C-3PO         \r\n# ... with more rows\r\n\r\nConnecting via the Connections Pane has some additional perks, in that you can have a look at your tables as though you‚Äôre in the DBMS itself. You may also preview the first 1000 rows.\r\n\r\nExplore data\r\nLet‚Äôs see if we can have a look at the popularity of the characters as per the survey dataset.\r\nThe TidyTuesday Star Wars survey dataset we used, was based on this FiveThirtyEight article.\r\n\r\n\r\n(svy_levels <- tbl(con, \"survey_levels\") %>% \r\n  collect())\r\n\r\n\r\n# A tibble: 6 x 2\r\n     id level                                      \r\n  <int> <chr>                                      \r\n1     5 Very favorably                             \r\n2     4 Somewhat favorably                         \r\n3     3 Neither favorably nor unfavorably (neutral)\r\n4     2 Somewhat unfavorably                       \r\n5     6 Unfamiliar (N/A)                           \r\n6     1 Very unfavorably                           \r\n\r\n(character_survey <- tbl(con, \"survey\") %>% \r\n  # Let's subset the rows to only those who claim they are fans of\r\n  # the franchise\r\n  filter(any_of_6 == \"Yes\", star_wars_fan == \"Yes\") %>% \r\n  # Let's only consider some columns\r\n  select(`Han Solo`:`Yoda`, respondent_id,\r\n         age = Age, respondent_gender = Gender) %>% \r\n  # we have to collect the data since the pivot_longer is\r\n  # not set up to work on DB Table data\r\n  collect() %>% \r\n  # Put each character name which is currently the name of a column\r\n  # in a column as a value\r\n  pivot_longer(cols = c(`Han Solo`:`Yoda`), names_to = \"name\",\r\n               values_to = \"survey_id\") %>% \r\n  # Get the actual text of the response - e.g. Very Favorable\r\n  inner_join(svy_levels,\r\n             by = c(\"survey_id\" = \"id\")))\r\n\r\n\r\n# A tibble: 7,657 x 6\r\n   respondent_id age   respondent_gender name      survey_id level    \r\n           <dbl> <chr> <chr>             <chr>         <int> <chr>    \r\n 1    3292879998 18-29 Male              Han Solo          5 Very fav~\r\n 2    3292879998 18-29 Male              Luke Sky~         5 Very fav~\r\n 3    3292879998 18-29 Male              Leia Org~         5 Very fav~\r\n 4    3292879998 18-29 Male              Anakin S~         5 Very fav~\r\n 5    3292879998 18-29 Male              Obi-Wan ~         5 Very fav~\r\n 6    3292879998 18-29 Male              Palpatine         5 Very fav~\r\n 7    3292879998 18-29 Male              Darth Va~         5 Very fav~\r\n 8    3292879998 18-29 Male              Lando Ca~         6 Unfamili~\r\n 9    3292879998 18-29 Male              Boba Fett         6 Unfamili~\r\n10    3292879998 18-29 Male              C-3P0             5 Very fav~\r\n# ... with 7,647 more rows\r\n\r\n# We want to only get the character info for the characters in the survey\r\n# So we want to basically say `WHERE name IN (...)`\r\n# This code is setting that up\r\ncharacters <- character_survey %>% \r\n  select(name) %>% \r\n  distinct() %>% \r\n  mutate(name = str_glue(\"'{name}'\")) %>% \r\n  as_tibble()\r\ncolnames(characters) <-  NULL\r\ncharacters <- characters %>% as.list() %>% unlist()\r\ncharacters <- characters %>%  paste(collapse =  \", \")\r\n# Creating the WHERE name IN `(...)` part\r\n(sql_code <- str_glue(\"({characters})\"))\r\n\r\n\r\n('Han Solo', 'Luke Skywalker', 'Leia Organa', 'Anakin Skywalker', 'Obi-Wan Kenobi', 'Palpatine', 'Darth Vader', 'Lando Calrissian', 'Boba Fett', 'C-3P0', 'R2-D2', 'Jar Jar Binks', 'Padme Amidala', 'Yoda')\r\n\r\nchar_query <- tbl(con, \"characters\") %>% \r\n  inner_join(tbl(con, \"appearances\")) %>% \r\n  inner_join(tbl(con, \"films\"),\r\n             by = c(\"film_id\" = \"id\")) %>% \r\n  select(name, gender, homeworld, species, films, year) %>% \r\n  # Note here I use the special function `sql()` to directly \r\n  # insert a bit of SQL code in my pipeline\r\n  filter(name %in% sql(sql_code)) \r\n\r\nchar_query %>% \r\n  show_query()\r\n\r\n\r\n<SQL>\r\nSELECT *\r\nFROM (SELECT `name`, `gender`, `homeworld`, `species`, `films`, `year`\r\nFROM (SELECT `name`, `height`, `mass`, `hair_color`, `skin_color`, `eye_color`, `birth_year`, `sex`, `gender`, `homeworld`, `species`, `film_id`, `films`, `year`\r\nFROM (SELECT `LHS`.`name` AS `name`, `height`, `mass`, `hair_color`, `skin_color`, `eye_color`, `birth_year`, `sex`, `gender`, `homeworld`, `species`, `film_id`\r\nFROM `characters` AS `LHS`\r\nINNER JOIN `appearances` AS `RHS`\r\nON (`LHS`.`name` = `RHS`.`name`)\r\n) `LHS`\r\nINNER JOIN `films` AS `RHS`\r\nON (`LHS`.`film_id` = `RHS`.`id`)\r\n) `q01`) `q02`\r\nWHERE (`name` IN ('Han Solo', 'Luke Skywalker', 'Leia Organa', 'Anakin Skywalker', 'Obi-Wan Kenobi', 'Palpatine', 'Darth Vader', 'Lando Calrissian', 'Boba Fett', 'C-3P0', 'R2-D2', 'Jar Jar Binks', 'Padme Amidala', 'Yoda'))\r\n\r\n(character_info <- character_survey %>%\r\n  # we only want info for the characters that formed part of the survey\r\n  left_join(char_query %>% \r\n              collect())) \r\n\r\n\r\n# A tibble: 29,012 x 11\r\n   respondent_id age   respondent_gend~ name  survey_id level gender\r\n           <dbl> <chr> <chr>            <chr>     <int> <chr> <chr> \r\n 1    3292879998 18-29 Male             Han ~         5 Very~ mascu~\r\n 2    3292879998 18-29 Male             Han ~         5 Very~ mascu~\r\n 3    3292879998 18-29 Male             Han ~         5 Very~ mascu~\r\n 4    3292879998 18-29 Male             Han ~         5 Very~ mascu~\r\n 5    3292879998 18-29 Male             Luke~         5 Very~ mascu~\r\n 6    3292879998 18-29 Male             Luke~         5 Very~ mascu~\r\n 7    3292879998 18-29 Male             Luke~         5 Very~ mascu~\r\n 8    3292879998 18-29 Male             Luke~         5 Very~ mascu~\r\n 9    3292879998 18-29 Male             Luke~         5 Very~ mascu~\r\n10    3292879998 18-29 Male             Leia~         5 Very~ femin~\r\n# ... with 29,002 more rows, and 4 more variables: homeworld <chr>,\r\n#   species <chr>, films <chr>, year <dbl>\r\n\r\ncharacter_info <- character_info %>% \r\n  mutate(name = as.factor(name)) %>% \r\n  # Let's create aggregated survey levels by combining\r\n  # Somewhat favorable and Very favourable into the Favourable category\r\n  # We're essentially trimming down the categories as per the FiveThirtyEight\r\n  # article\r\n  mutate(sub_level = case_when(\r\n   str_detect(level, \"Neither favorably nor unfavorably\")  ~  \"Neutral\",\r\n   (str_detect(level, \" unfavorably\") |\r\n      str_detect(level, \"Somewhat unfavorably\"))           ~  \"Unfavourable\",\r\n   (str_detect(level, \"Very favorably\") |\r\n      str_detect(level, \"Somewhat favorably\"))             ~ \"Favourable\",\r\n   str_detect(level, \"Unfamiliar\")                         ~ \"Unfamiliar\",\r\n   TRUE                                                    ~ \"None\"\r\n   )) %>% \r\n  mutate(sub_level = factor(sub_level, levels = c(\"Favourable\", \r\n                                                  \"Neutral\", \"Unfavourable\", \r\n                                                  \"Unfamiliar\"))) \r\n\r\n# Processing to setup the waffle plot\r\n# We want to understand each character's popularity\r\ncharacter_info <- character_info %>% \r\n  select(respondent_id, name, sub_level) %>% \r\n  distinct() %>% \r\n  group_by(name) %>% \r\n  mutate(n = n()) %>% \r\n  ungroup() %>% \r\n  group_by(name, sub_level) %>% \r\n  mutate(\r\n    nn = n(),\r\n    perc = nn / n * 100.0) %>% \r\n  ungroup() %>% \r\n  select(name, sub_level, n, nn, perc) %>% \r\n  distinct() %>% \r\n  inner_join(character_info) %>% \r\n  select(respondent_id:respondent_gender, name, \r\n         survey_id, level, sub_level:perc, gender:year)\r\n\r\n\r\n\r\nWe‚Äôll create a waffle plot to have a look at how popular the characters are. In a few cases the overall percentage is slightly less than 100%. This is due to rounding quirks.\r\n\r\n\r\n# remotes::install_github(\"hrbrmstr/waffle\")\r\nlibrary(waffle)\r\n\r\ncharacter_info %>% \r\n  select(name, sub_level, perc) %>% \r\n  distinct() %>% \r\n  ggplot(aes(fill = sub_level, values = perc %>% round())) +\r\n  geom_waffle(colour = \"white\", n_rows = 10, size = 0.33,\r\n              pad = 1, flip = FALSE,\r\n              make_proportional = TRUE) +\r\n  facet_wrap(~ name) +\r\n  labs(title = \"Popularity of Star Wars Characters\",\r\n       subtitle = \"Among US respondents who consider themselves Star Wars Fans\",\r\n       x = \"1 square = 1%\",\r\n       fill = \"\")  +\r\n  theme(legend.position=\"bottom\", \r\n        panel.spacing = unit(1, \"lines\"),\r\n        strip.background = element_blank(),\r\n        axis.text.x = element_blank(),\r\n        axis.text.y = element_blank(),\r\n        axis.ticks = element_blank())\r\n\r\n\r\n\r\n# Check: \r\n# rounding causing waffle to not be fully filled\r\ncharacter_info %>% \r\n  select(name, sub_level, perc) %>% \r\n  distinct() %>% \r\n  filter(name == \"Lando Calrissian\")\r\n\r\n\r\n# A tibble: 4 x 3\r\n  name             sub_level     perc\r\n  <fct>            <fct>        <dbl>\r\n1 Lando Calrissian Unfamiliar    8.61\r\n2 Lando Calrissian Favourable   54.9 \r\n3 Lando Calrissian Neutral      28.8 \r\n4 Lando Calrissian Unfavourable  7.69\r\n\r\nDone? Remember to disconnect!\r\n\r\n\r\n# Good housekeeping means disconnect\r\ndbDisconnect(con)\r\n\r\n\r\n\r\nFin\r\nThat‚Äôs it for this series of working with databases. I hope it was useful, if you have any comments or feedback please let me know on Twitter.\r\nAcknowledgements\r\nEdgar Ruiz‚Äôs database work, and teachings.\r\nMore resources\r\nMy RStudio Certification GitHub Project\r\nRStudio DB Resources\r\nA murder mystery SQLite DB\r\n\r\n\r\n\r\n",
    "preview": "posts/2020-12-31-using-tidyverse-with-dbs-partiii/jens-johnsson-OFpzBycm3u0-unsplash.jpg",
    "last_modified": "2021-01-09T23:24:30+02:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-12-20-using-the-tidyverse-with-dbs-partii/",
    "title": "Using the tidyverse with Databases - Part II",
    "description": "I was serious, you don't need to be a SQL expert to work with Databases through R",
    "author": [
      {
        "name": "Vebash Naidoo",
        "url": "https://twitter.com/Sciencificity"
      }
    ],
    "date": "2020-12-20",
    "categories": [
      "SQL",
      "databases",
      "tidyverse",
      "dbplyr"
    ],
    "contents": "\r\n\r\nContents\r\nPart I\r\nWhat are we tackling in Part II?\r\nConnect, and remind ourselves what we‚Äôre working withMake a connection\r\nLet‚Äôs get familiar with our dataresults\r\nbaker_results\r\n\r\n\r\nWhat are we interested in?Joining dataRemember the tbl(con, \"tbl_name\") always\r\n\r\nCollectWhat does the query look like?\r\nBring it into R\r\nVisualise Data\r\n\r\nDone? Remember to disconnect!\r\n\r\nStill to comeAcknowledgements\r\n\r\n\r\n\r\n\r\n\r\n.main-container {\r\n    max-width: 600px !important;\r\n}\r\n\r\npre {\r\n  max-height: 800px !important;\r\n  max-width: 600px !important;\r\n  overflow-y: auto !important;\r\n  overflow-x: scroll !important;\r\n}\r\n\r\npre[class] {\r\n  max-height: 100px;\r\n}\r\n\r\n\r\n\r\n\r\nPart I\r\nIn Part I we made a connection to a SQLite DB.\r\nWhat are we tackling in Part II?\r\nWe‚Äôll do more advanced dplyr üì¶ workflows.\r\nWe‚Äôll collect the data from the query.\r\ncollecting data is when we bring the data into R. If you recall in the Part I post, all computation was happening on the DB itself, and not pulled into R.\r\nThe project on GitHub, has the example SQLite database, the slides, and some code files.\r\nConnect, and remind ourselves what we‚Äôre working with\r\nMake a connection\r\nAs always, our first step is to connect to the database.\r\n\r\n\r\nlibrary(DBI) # main DB interface\r\nlibrary(dplyr) \r\nlibrary(dbplyr) # dplyr back-end for DBs\r\n\r\ncon <- dbConnect(drv = RSQLite::SQLite(), # give me a SQLite connection\r\n        dbname = \"data/great_brit_bakeoff.db\") # To what? The DB named great_brit_bakeoff.db\r\n\r\ndbListTables(con) # List me the tables at the connection\r\n\r\n\r\n [1] \"baker_results\"     \"bakers\"            \"bakes\"            \r\n [4] \"challenge_results\" \"challenges\"        \"episode_results\"  \r\n [7] \"episodes\"          \"ratings\"           \"ratings_seasons\"  \r\n[10] \"results\"           \"seasons\"           \"series\"           \r\n\r\nLet‚Äôs get familiar with our data\r\nIn the dataset we have:\r\nresults which tells us how each baker did in the episode - IN, OUT, WINNER etc.\r\nbaker_results which tells us a bit more about the baker‚Äôs performance over the entire series - how many times did they win STAR BAKER, how many times they placed in the top 3 etc.\r\nLet‚Äôs get an idea of what is in each table.\r\nresults\r\n\r\n\r\ntbl(con, \"results\") %>% # Reach into my connection, and \"talk\" to results table\r\n  head(10) %>%          # get me a subset of the data\r\n  # sometimes if there are many columns, some columns are hidden, \r\n  # this option prints all columns for us\r\n  print(width = Inf)    \r\n\r\n\r\n# Source:   lazy query [?? x 4]\r\n# Database: sqlite 3.33.0\r\n#   [C:\\Personal\\Blog_Vebash\\_posts\\2020-12-20-using-the-tidyverse-with-dbs-partii\\data\\great_brit_bakeoff.db]\r\n   series episode baker   result\r\n    <int>   <int> <chr>   <chr> \r\n 1      1       1 Annetha IN    \r\n 2      1       2 Annetha OUT   \r\n 3      1       3 Annetha <NA>  \r\n 4      1       4 Annetha <NA>  \r\n 5      1       5 Annetha <NA>  \r\n 6      1       6 Annetha <NA>  \r\n 7      1       1 David   IN    \r\n 8      1       2 David   IN    \r\n 9      1       3 David   IN    \r\n10      1       4 David   OUT   \r\n\r\n\r\n\r\ntbl(con, \"results\") %>% \r\n  count(result, sort = TRUE) # what categories of \"result\" are there?\r\n\r\n\r\n# Source:     lazy query [?? x 2]\r\n# Database:   sqlite 3.33.0\r\n#   [C:\\Personal\\Blog_Vebash\\_posts\\2020-12-20-using-the-tidyverse-with-dbs-partii\\data\\great_brit_bakeoff.db]\r\n# Ordered by: desc(n)\r\n  result         n\r\n  <chr>      <int>\r\n1 IN           452\r\n2 <NA>         376\r\n3 OUT           79\r\n4 STAR BAKER    70\r\n5 RUNNER-UP     18\r\n6 WINNER         9\r\n7 [a]            1\r\n8 WD             1\r\n\r\nbaker_results\r\n\r\n\r\ntbl(con, \"baker_results\") %>% # Reach in and \"talk\" to baker_results\r\n  head() %>%                  # get a glimpse of data\r\n  collect() %>%               # bring that glimpsed data into R \r\n  DT::datatable(options = list(scrollX = TRUE)) # force DT horizontal scrollbar\r\n\r\n\r\n\r\n{\"x\":{\"filter\":\"none\",\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"],[1,1,1,1,1,1],[\"Annetha Mills\",\"David Chambers\",\"Edward \\\"Edd\\\" Kimber\",\"Jasminder Randhawa\",\"Jonathan Shepherd\",\"Lea Harris\"],[\"Annetha\",\"David\",\"Edd\",\"Jasminder\",\"Jonathan\",\"Lea\"],[30,31,24,45,25,51],[\"Single mother\",\"Entrepreneur\",\"Debt collector for Yorkshire Bank\",\"Assistant Credit Control Manager\",\"Research Analyst\",\"Retired\"],[\"Essex\",\"Milton Keynes\",\"Bradford\",\"Birmingham\",\"St Albans\",\"Midlothian, Scotland\"],[\"Mills\",\"Chambers\",\"Kimber\",\"Randhawa\",\"Shepherd\",\"Harris\"],[\"Annetha\",\"David\",\"Edward\",\"Jasminder\",\"Jonathan\",\"Lea\"],[0,0,0,0,0,0],[0,0,2,0,1,0],[1,1,4,2,1,0],[1,3,1,2,2,1],[2,3,1,2,1,10],[7,8,6,5,9,10],[4.5,4.5,2,3,6,10],[0,0,1,0,0,0],[0,0,0,0,0,0],[2,4,6,5,3,1],[14838,14838,14838,14838,14838,14838],[14845,14859,14873,14866,14852,14838],[null,null,null,null,null,null],[null,null,null,null,null,null],[33.3333333333333,66.6666666666667,100,83.3333333333333,50,16.6666666666667],[50,25,66.6666666666667,40,33.3333333333333,0]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>series<\\/th>\\n      <th>baker_full<\\/th>\\n      <th>baker<\\/th>\\n      <th>age<\\/th>\\n      <th>occupation<\\/th>\\n      <th>hometown<\\/th>\\n      <th>baker_last<\\/th>\\n      <th>baker_first<\\/th>\\n      <th>star_baker<\\/th>\\n      <th>technical_winner<\\/th>\\n      <th>technical_top3<\\/th>\\n      <th>technical_bottom<\\/th>\\n      <th>technical_highest<\\/th>\\n      <th>technical_lowest<\\/th>\\n      <th>technical_median<\\/th>\\n      <th>series_winner<\\/th>\\n      <th>series_runner_up<\\/th>\\n      <th>total_episodes_appeared<\\/th>\\n      <th>first_date_appeared<\\/th>\\n      <th>last_date_appeared<\\/th>\\n      <th>first_date_us<\\/th>\\n      <th>last_date_us<\\/th>\\n      <th>percent_episodes_appeared<\\/th>\\n      <th>percent_technical_top3<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,4,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\r\nNotice the use of the collect() function in the code above. I wanted us to be able to get a full glimpse of the data in a nice table, and hence I brought the first few rows of data into R by using the collect() function. This allowed me to then use datatable to display the results a bit better, than the print(width = Inf) alternative.\r\nWhat are we interested in?\r\nLet‚Äôs say we want to see how the WINNER and RUNNER-UP(s) did in the series they appeared in.\r\nTo do that we need to get all the baker_results for the WINNER and RUNNER-UP.\r\nJoining data\r\nWhen doing joins we want to find the common columns across the two tables that we can join on.\r\nIn results we have series and baker.\r\nIn baker_results we have series and baker.\r\n‚ùì ü§î Why didn‚Äôt I also choose the episode column of results as a join column?  ‚úÖ Yes, that column is not in baker_results, since baker_results contains data about how the baker did overall in the series they appeared, that is, one row per baker. The results data however, contains info per baker, per episode, for the series they appeared in - i.e.¬†if they flopped (were OUT üòâ), in the second episode of a series that contained 10 episodes, their name would appear 10 times in the results table, but their ‚Äúresult‚Äù value will be NA from episode 3 onwards.\r\nRemember the tbl(con, \"tbl_name\") always\r\nI‚Äôd like to bring to your attention the use of tbl(con, \"table_1\") and tbl(con, \"table_2\") in the join function.\r\nWe must always keep this in mind, because baker_results and results don‚Äôt exist in R yet. We‚Äôre talking to those tables in our relational database management system (RDBMS), so we always have to do so through our connection.\r\n\r\n\r\nset.seed(42)\r\ntbl(con, \"baker_results\") %>% # use connection to \"talk\" to baker_results\r\n  inner_join(tbl(con, \"results\"), # use connection to \"talk\" to results and join both tables \r\n        by = c('baker' = 'baker',\r\n               'series' = 'series')) %>% # join criteria \r\n  collect() %>% # get it into R\r\n  sample_n(size = 3) %>% # take a random sample\r\n  print(width = Inf) # print all columns\r\n\r\n\r\n# A tibble: 3 x 26\r\n  series baker_full     baker     age occupation                 \r\n   <dbl> <chr>          <chr>   <dbl> <chr>                      \r\n1      6 Ian Cumming    Ian        41 Travel photographer        \r\n2      4 Frances Quinn  Frances    31 Children's Clothes Designer\r\n3      2 Yasmin Limbert Yasmin     43 Childminder                \r\n  hometown                          baker_last baker_first star_baker\r\n  <chr>                             <chr>      <chr>            <int>\r\n1 Great Wilbraham, Cambridgeshire   Cumming    Ian                  3\r\n2 Market Harborough, Leicestershire Quinn      Frances              1\r\n3 West Kirby, The Wirral            Limbert    Yasmin               1\r\n  technical_winner technical_top3 technical_bottom technical_highest\r\n             <int>          <int>            <int>             <dbl>\r\n1                1              6                4                 1\r\n2                1              7                3                 1\r\n3                0              2                4                 2\r\n  technical_lowest technical_median series_winner series_runner_up\r\n             <dbl>            <dbl>         <int>            <int>\r\n1                8                3             0                1\r\n2                8                3             1                0\r\n3                6                5             0                0\r\n  total_episodes_appeared first_date_appeared last_date_appeared\r\n                    <dbl>               <dbl>              <dbl>\r\n1                      10               16652              16715\r\n2                      10               15937              16000\r\n3                       6               15202              15237\r\n  first_date_us last_date_us percent_episodes_appeared\r\n          <dbl>        <dbl>                     <dbl>\r\n1         16983        17025                       100\r\n2         16432        16495                       100\r\n3            NA           NA                        75\r\n  percent_technical_top3 episode result\r\n                   <dbl>   <int> <chr> \r\n1                   60         5 IN    \r\n2                   70         5 IN    \r\n3                   33.3       5 IN    \r\n\r\nNotice that all columns of baker_results appear first and then we have the ‚Äúextra‚Äù columns from results i.e.¬†episode and result.\r\nCommon mistake\r\nI included the above to show that each time we ‚Äútalk‚Äù to a table we must do so through our connection, because I often make the mistake of not including the tbl(con, \"name_of_tbl_i_am_joining\") in the join function. I, more times than I care to admit ü§¶, incorrectly write:\r\n\r\n  tbl(con, \"table1\") %>% # correct -> \"talk\" through connection\r\n     left_join(table2,   # incorrect -> forgot to use the connection\r\n          by = c(\"tbl1_name1\" = \"tbl2_name1\"))\r\n\r\nI would like to help you, not repeat my mistake üòï, so heads up AVOID THE FOLLOWING üöè:\r\n\r\n\r\ntbl(con, \"baker_results\") %>% # use connection to \"talk\" to baker_results\r\n  inner_join(results,  # OOPS! I forgot the tbl(con, \"results\")\r\n        by = c('baker' = 'baker',\r\n               'series' = 'series'))  \r\n\r\n\r\nError in tbl_vars_dispatch(x): object 'results' not found\r\n\r\nCollect\r\nOk, let us now do our entire pipeline, and only bring the data into R when we‚Äôve got what we‚Äôre looking for.\r\nWe need to:\r\nJoin the tables\r\nFilter the data for WINNER and RUNNER-UP in the result column.\r\nSelect only the columns we‚Äôre interested in.\r\n\r\n\r\n(final_query <- tbl(con, \"baker_results\") %>% # use connection to \"talk\" to baker_results\r\n  inner_join(tbl(con, \"results\"), # use connection to \"talk\" to results and join both tables \r\n        by = c('baker' = 'baker',\r\n               'series' = 'series')) %>% # join criteria \r\n  filter(result %in% c(\"WINNER\", \"RUNNER-UP\")) %>% # filter rows we're interested in\r\n  select(series, baker:percent_technical_top3,\r\n         result))\r\n\r\n\r\n# Source:   lazy query [?? x 24]\r\n# Database: sqlite 3.33.0\r\n#   [C:\\Personal\\Blog_Vebash\\_posts\\2020-12-20-using-the-tidyverse-with-dbs-partii\\data\\great_brit_bakeoff.db]\r\n   series baker   age occupation hometown baker_last baker_first\r\n    <dbl> <chr> <dbl> <chr>      <chr>    <chr>      <chr>      \r\n 1      1 Edd      24 Debt coll~ Bradford Kimber     Edward     \r\n 2      1 Mira~    37 Food buye~ Midhurs~ Browne     Miranda    \r\n 3      1 Ruth     31 Retail ma~ Poynton~ Clemens    Ruth       \r\n 4      2 Holly    31 Advertisi~ Leicest~ Bell       Holly      \r\n 5      2 Joan~    41 Housewife  Ongar, ~ Wheatley   Joanne     \r\n 6      2 Mary~    45 Housewife  Kidderm~ Boermans   Mary-Anne  \r\n 7      3 Bren~    63 Recruitme~ Sutton ~ Lynch      Brendan    \r\n 8      3 James    21 Medical s~ Hillswi~ Morton     James      \r\n 9      3 John     23 Law stude~ Wigan    Whaite     John       \r\n10      4 Fran~    31 Children'~ Market ~ Quinn      Frances    \r\n# ... with more rows, and 17 more variables: star_baker <int>,\r\n#   technical_winner <int>, technical_top3 <int>,\r\n#   technical_bottom <int>, technical_highest <dbl>,\r\n#   technical_lowest <dbl>, technical_median <dbl>,\r\n#   series_winner <int>, series_runner_up <int>,\r\n#   total_episodes_appeared <dbl>, first_date_appeared <dbl>,\r\n#   last_date_appeared <dbl>, first_date_us <dbl>,\r\n#   last_date_us <dbl>, percent_episodes_appeared <dbl>,\r\n#   percent_technical_top3 <dbl>, result <chr>\r\n\r\nThe above code just sets up the query that will be executed should we run (Ctrl + Enter) final_query in R (hence the lazy query [?? x 24] in the output). No data is collected (i.e.¬†present in your local R environment) as yet.\r\nWhat does the query look like?\r\n\r\n\r\n.scroll-100 {\r\n  white-space:pre !important;\r\n  max-width: 100px;\r\n  overflow-x: scroll;\r\n  background-color: inherit;\r\n}\r\ncode.r{\r\n  font-size: 10px;\r\n}\r\n\r\n\r\n\r\n\r\nfinal_query %>% \r\n  show_query() \r\n\r\n\r\n<SQL>\r\nSELECT `series`, `baker`, `age`, `occupation`, `hometown`, `baker_last`, `baker_first`, `star_baker`, `technical_winner`, `technical_top3`, `technical_bottom`, `technical_highest`, `technical_lowest`, `technical_median`, `series_winner`, `series_runner_up`, `total_episodes_appeared`, `first_date_appeared`, `last_date_appeared`, `first_date_us`, `last_date_us`, `percent_episodes_appeared`, `percent_technical_top3`, `result`\r\nFROM (SELECT `LHS`.`series` AS `series`, `baker_full`, `LHS`.`baker` AS `baker`, `age`, `occupation`, `hometown`, `baker_last`, `baker_first`, `star_baker`, `technical_winner`, `technical_top3`, `technical_bottom`, `technical_highest`, `technical_lowest`, `technical_median`, `series_winner`, `series_runner_up`, `total_episodes_appeared`, `first_date_appeared`, `last_date_appeared`, `first_date_us`, `last_date_us`, `percent_episodes_appeared`, `percent_technical_top3`, `episode`, `result`\r\nFROM `baker_results` AS `LHS`\r\nINNER JOIN `results` AS `RHS`\r\nON (`LHS`.`baker` = `RHS`.`baker` AND `LHS`.`series` = `RHS`.`series`)\r\n)\r\nWHERE (`result` IN ('WINNER', 'RUNNER-UP'))\r\n\r\n\r\n\r\nBring it into R\r\nNow finally, we are ready to bring our filtered and joined data into R by using collect().\r\n\r\n\r\n(top_performers <- final_query %>% \r\n  collect())\r\n\r\n\r\n# A tibble: 24 x 24\r\n   series baker   age occupation hometown baker_last baker_first\r\n    <dbl> <chr> <dbl> <chr>      <chr>    <chr>      <chr>      \r\n 1      1 Edd      24 Debt coll~ Bradford Kimber     Edward     \r\n 2      1 Mira~    37 Food buye~ Midhurs~ Browne     Miranda    \r\n 3      1 Ruth     31 Retail ma~ Poynton~ Clemens    Ruth       \r\n 4      2 Holly    31 Advertisi~ Leicest~ Bell       Holly      \r\n 5      2 Joan~    41 Housewife  Ongar, ~ Wheatley   Joanne     \r\n 6      2 Mary~    45 Housewife  Kidderm~ Boermans   Mary-Anne  \r\n 7      3 Bren~    63 Recruitme~ Sutton ~ Lynch      Brendan    \r\n 8      3 James    21 Medical s~ Hillswi~ Morton     James      \r\n 9      3 John     23 Law stude~ Wigan    Whaite     John       \r\n10      4 Fran~    31 Children'~ Market ~ Quinn      Frances    \r\n# ... with 14 more rows, and 17 more variables: star_baker <int>,\r\n#   technical_winner <int>, technical_top3 <int>,\r\n#   technical_bottom <int>, technical_highest <dbl>,\r\n#   technical_lowest <dbl>, technical_median <dbl>,\r\n#   series_winner <int>, series_runner_up <int>,\r\n#   total_episodes_appeared <dbl>, first_date_appeared <dbl>,\r\n#   last_date_appeared <dbl>, first_date_us <dbl>,\r\n#   last_date_us <dbl>, percent_episodes_appeared <dbl>,\r\n#   percent_technical_top3 <dbl>, result <chr>\r\n\r\nHow about that? Notice the A tibble: 24 x 24! R now, has the data in it‚Äôs local environment, and can definitively tell us it knows there are 24 observations (no more lazy query) üòÑ.\r\nVisualise Data\r\nNow that we have finalised what data we wanted from our RDBMS, executed our query, and collected the data into our R environment we can do further processing, create plots for reports etc.\r\nI am interested in understanding how did the winner and runner-up(s) of series 6 do across the season in terms of technical challenges etc.?\r\n\r\n\r\nlibrary(tidyverse)\r\n\r\ntop_performers %>% \r\n  # filter for season we're interested in\r\n  filter(series == 6) %>%\r\n  # format baker nicely so we see winner, then runner-up(s)\r\n  mutate(baker_name = factor(str_glue(\"{result} - {baker}\")),\r\n         baker_name = fct_rev(baker_name)) %>% \r\n  # let's convert all the tech info cols to be a metric name, \r\n  # and put the value in the value column \r\n  # (by default values_to = \"value\" in pivot_longer())\r\n  pivot_longer(cols = c(star_baker:technical_median),\r\n               names_to = \"metric\") %>% \r\n  mutate(metric = fct_reorder(metric, value)) %>% \r\n  ggplot(aes(x = value, y = metric)) +\r\n  geom_col(fill = \"#727d97\") +\r\n  facet_wrap(~ baker_name) +\r\n  labs(title = str_glue(\"Metrics for Season \",\r\n    \"{top_performers %>%  filter(series == 6) %>%\r\n    select(series) %>% distinct()}'s Winner and Runner-Up(s)\"),\r\n    y = \"\") +\r\n  theme_light() +\r\n  theme(panel.spacing = unit(1, \"lines\")) +\r\n  theme(strip.background =element_rect(fill=\"#f4e4e7\"))+\r\n  theme(strip.text = element_text(colour = \"#5196b4\"))\r\n\r\n\r\n\r\n\r\nGiven that Nadiya was a technical winner more times than the other contestants, and that her technical_lowest was better (higher number is better) it looks like she had a good run throughout the series, and was a deserved winner.\r\nDone? Remember to disconnect!\r\nGood housekeeping means always remembering to disconnect once you‚Äôre done.\r\n\r\n\r\ndbDisconnect(con) # closes our DB connection\r\n\r\n\r\n\r\nStill to come\r\nSetting up an external DB in PostgreSQL / MySQL.\r\nConnecting to said DB, and running SQL workloads on it.\r\nAcknowledgements\r\nThe Great British Bake Off data from Dr.¬†Alison Hill.\r\nEdgar Ruiz‚Äôs database work, and teachings.\r\n\r\n\r\n\r\n",
    "preview": "posts/2020-12-20-using-the-tidyverse-with-dbs-partii/Paper.R_Programming.4.png",
    "last_modified": "2020-12-21T03:11:50+02:00",
    "input_file": {},
    "preview_width": 2048,
    "preview_height": 1536
  },
  {
    "path": "posts/2020-12-12-using-the-tidyverse-with-databases/",
    "title": "Using the tidyverse with Databases - Part I",
    "description": "You don't need to be a SQL expert to work with Databases through R",
    "author": [
      {
        "name": "Vebash Naidoo",
        "url": "https://twitter.com/Sciencificity"
      }
    ],
    "date": "2020-12-12",
    "categories": [
      "SQL",
      "databases",
      "tidyverse",
      "dbplyr"
    ],
    "contents": "\r\n\r\nContents\r\nBackground\r\nIntro to using Databases in R, with Tidyverse tools (Part I)Motivation\r\nConnecting to a DatabasePackages needed\r\nThe database we‚Äôll use\r\nConnecting to a SQLite DB\r\n\r\nTake a look aroundDBI Functions\r\ndplyr Functions\r\nHave a look at the SQL behind the scenes\r\nWhat‚Äôs with this lazy query / ?? we‚Äôre seeing?\r\n\r\nDone? Remember to disconnect!\r\n\r\nSlides\r\nStill to comeAcknowledgements\r\n\r\n\r\n\r\nBackground\r\nOn the 1st of December I certified as an RStudio Tidyverse Instructor. As part of the process I prepared a sample lesson that was delivered during the exam. In a series of posts I will go through an extension of that sample lesson.\r\nIntro to using Databases in R, with Tidyverse tools (Part I)\r\nMotivation\r\nYou often have data in a corporate or institutional database (often termed relational database management system, or RDBMS). The language to talk with such a database (DB) is some variant of the language SQL (Structured Query Language). I say some variant, since a vendor providing an RDBMS may adopt the standardised SQL, but they may also extend it with their own variations.\r\nIf you use different RDBMS‚Äôs from different vendors you need to understand how to query that DB using the particular SQL dialect used by that vendor. For example, we use PostgreSQL, and we also use PrestoDB (for Athena on AWS). JSON fields in the PostgreSQL DB are ingested as structured nested arrays in AWS and hence when querying the same field we use different query syntax.\r\nYou know R, especially the dplyr üì¶. Even though the dplyr üì¶ is so well written to mimic the SQL syntax - select(), group_by(), left_join() etc. there is still a cognitive load when you switch between using R syntax, and SQL syntax (ask me, who has often written == in SQL syntax on Athena only to wonder why I am getting an error ü§ê).\r\nYou only have so much memory in your local environment, and may want your RDBMS to do the heavy lifting (most of the computation), and only pull data into R when you need to (e.g.¬†pull in aggregated data to create plots for a report).\r\nIn this tutorial you will learn how to use dbplyr, which is a database back-end of dplyr, to execute queries directly in your RDBMS all the while writing R tidyverse syntax üòÆ ‚≠ê.\r\nConnecting to a Database\r\nPackages needed\r\nDBI: This is the main package which is a Database Interface for R.install.packages(\"DBI\")\r\ndbplyr: The üì¶ we may use to talk to our database, all the while using dplyr syntax in our code.install.packages(\"dbplyr\")\r\ndplyr: To select(), group_by() as well as ‚Äútalk‚Äù, via the connection we will establish, to a database table.\r\nRSQLite: DBI compliant package that allows a connection to a lightweight single user SQLite DB.install.packages(\"RSQLite\")\r\nOther DBI compliant R packages you may need for your use case - e.g.¬†RPostgres is for connecting to a PostgreSQL RDBMS. Note: Not used in this tutorial (brief overview in slides), and RStudio‚Äôs DB Website is a treasure trove of information üë©‚Äçüíª.\r\nodbc: This is a DBI compliant interface to allow you to interface to your RDBMS using an odbc driver.Note: Not used in this tutorial (brief overview in slides), and again RStudio‚Äôs DB Website has useful information in this regard too!install.packages(\"odbc\")\r\nThe database we‚Äôll use\r\nAlison Hill created a dataset for The Great British Bake Off. I used the data from her package to create a SQLite DB that we will use to practise on.\r\nConnecting to a SQLite DB\r\nFor the purposes of this tutorial we will connect to a SQLite DB that I created. To talk to the DB we need to first make a connection.\r\nLoad the DBI package: library(DBI)\r\nMake a connection: con <- dbConnect(RSQLite::SQLite(), \"mydb.db\")\r\n\r\n\r\nlibrary(DBI) # main DB interface\r\nlibrary(dplyr) \r\nlibrary(dbplyr) # dplyr back-end for DBs\r\n\r\ncon <- dbConnect(drv = RSQLite::SQLite(), # give me a SQLite connection\r\n        dbname = \"data/great_brit_bakeoff.db\") # To what? The DB named great_brit_bakeoff.db\r\nsummary(con) # What do we have? \r\n\r\n\r\n          Length            Class             Mode \r\n               1 SQLiteConnection               S4 \r\n\r\nOk, we have successfully managed to connect to the DB.\r\nTake a look around\r\nAlright, we‚Äôve made a connection now what? Let‚Äôs have a look around using some DBI functions.\r\nDBI Functions\r\n\r\n\r\ndbListTables(con) # List me the tables at the connection\r\n\r\n\r\n [1] \"baker_results\"     \"bakers\"            \"bakes\"            \r\n [4] \"challenge_results\" \"challenges\"        \"episode_results\"  \r\n [7] \"episodes\"          \"ratings\"           \"ratings_seasons\"  \r\n[10] \"results\"           \"seasons\"           \"series\"           \r\n\r\ndbListFields(con, # Reach into my connection and ...\r\n      \"bakers\")   # tell me what fields does the `bakers` table have?\r\n\r\n\r\n[1] \"series\"     \"baker_full\" \"age\"        \"occupation\" \"hometown\"  \r\n\r\nres <- dbSendQuery(con, \"SELECT * FROM bakers LIMIT 3\") # Execute a query\r\ndbFetch(res) # get the result\r\n\r\n\r\n  series          baker_full age                        occupation\r\n1      1       Annetha Mills  30                           Midwife\r\n2      1      David Chambers  31                      Entrepreneur\r\n3      1 Edward \"Edd\" Kimber  24 Debt collector for Yorkshire Bank\r\n       hometown\r\n1         Essex\r\n2 Milton Keynes\r\n3      Bradford\r\n\r\ndbClearResult(res) # clear the result\r\n\r\n\r\n\r\ndplyr Functions\r\nOk, let‚Äôs flex our dplyr skills üòÑ.\r\ntbl(con, \"name_of_table\") says using my connection ‚Äúcon‚Äù go execute a SELECT * FROM name_of_table.\r\n\r\n\r\ntbl(con, \"bakers\") # let's have a look - works like glimpse()\r\n\r\n\r\n# Source:   table<bakers> [?? x 5]\r\n# Database: sqlite 3.33.0\r\n#   [C:\\Personal\\Blog_Vebash\\_posts\\2020-12-12-using-the-tidyverse-with-databases\\data\\great_brit_bakeoff.db]\r\n   series baker_full          age occupation            hometown      \r\n    <dbl> <chr>             <dbl> <chr>                 <chr>         \r\n 1      1 \"Annetha Mills\"      30 Midwife               Essex         \r\n 2      1 \"David Chambers\"     31 Entrepreneur          Milton Keynes \r\n 3      1 \"Edward \\\"Edd\\\" ~    24 Debt collector for Y~ Bradford      \r\n 4      1 \"Jasminder Randh~    45 Assistant Credit Con~ Birmingham    \r\n 5      1 \"Jonathan Shephe~    25 Research Analyst      St Albans     \r\n 6      1 \"Lea Harris\"         51 Retired               Midlothian, S~\r\n 7      1 \"Louise Brimelow\"    44 Police Officer        Manchester    \r\n 8      1 \"Mark Whithers\"      48 Bus Driver            South Wales   \r\n 9      1 \"Miranda Gore Br~    37 Food buyer for Marks~ Midhurst, Wes~\r\n10      1 \"Ruth Clemens\"       31 Retail manager/House~ Poynton, Ches~\r\n# ... with more rows\r\n\r\ntbl(con, \"bakers\") %>% \r\n  head(3) # \"SELECT * FROM bakers LIMIT 3\"\r\n\r\n\r\n# Source:   lazy query [?? x 5]\r\n# Database: sqlite 3.33.0\r\n#   [C:\\Personal\\Blog_Vebash\\_posts\\2020-12-12-using-the-tidyverse-with-databases\\data\\great_brit_bakeoff.db]\r\n  series baker_full           age occupation               hometown   \r\n   <dbl> <chr>              <dbl> <chr>                    <chr>      \r\n1      1 \"Annetha Mills\"       30 Midwife                  Essex      \r\n2      1 \"David Chambers\"      31 Entrepreneur             Milton Key~\r\n3      1 \"Edward \\\"Edd\\\" K~    24 Debt collector for York~ Bradford   \r\n\r\nNotice that each time we used con. We use our connection con to ‚Äútalk‚Äù to our database, and we will use it throughout, even in our tidy pipelines.\r\nIn baker_results we have the baker with their details, as well as their standing in the series competition. Let‚Äôs say we wanted to know if the winners came from different areas in Britain, or from some areas in particular.\r\n\r\n\r\ndbListFields(con, \"baker_results\")\r\n\r\n\r\n [1] \"series\"                    \"baker_full\"               \r\n [3] \"baker\"                     \"age\"                      \r\n [5] \"occupation\"                \"hometown\"                 \r\n [7] \"baker_last\"                \"baker_first\"              \r\n [9] \"star_baker\"                \"technical_winner\"         \r\n[11] \"technical_top3\"            \"technical_bottom\"         \r\n[13] \"technical_highest\"         \"technical_lowest\"         \r\n[15] \"technical_median\"          \"series_winner\"            \r\n[17] \"series_runner_up\"          \"total_episodes_appeared\"  \r\n[19] \"first_date_appeared\"       \"last_date_appeared\"       \r\n[21] \"first_date_us\"             \"last_date_us\"             \r\n[23] \"percent_episodes_appeared\" \"percent_technical_top3\"   \r\n\r\ntbl(con, \"baker_results\") %>% \r\n  select(series, baker, hometown, series_winner) # normal dplyr select\r\n\r\n\r\n# Source:   lazy query [?? x 4]\r\n# Database: sqlite 3.33.0\r\n#   [C:\\Personal\\Blog_Vebash\\_posts\\2020-12-12-using-the-tidyverse-with-databases\\data\\great_brit_bakeoff.db]\r\n   series baker     hometown              series_winner\r\n    <dbl> <chr>     <chr>                         <int>\r\n 1      1 Annetha   Essex                             0\r\n 2      1 David     Milton Keynes                     0\r\n 3      1 Edd       Bradford                          1\r\n 4      1 Jasminder Birmingham                        0\r\n 5      1 Jonathan  St Albans                         0\r\n 6      1 Lea       Midlothian, Scotland              0\r\n 7      1 Louise    Manchester                        0\r\n 8      1 Mark      South Wales                       0\r\n 9      1 Miranda   Midhurst, West Sussex             0\r\n10      1 Ruth      Poynton, Cheshire                 0\r\n# ... with more rows\r\n\r\nNotice how our dplyr select() has trimmed down the number of columns from 24 to 4.\r\nTime to see if our winning bakers hail from similar hometowns or not.\r\n\r\n\r\ntbl(con, \"baker_results\") %>% \r\n  select(series, baker, hometown, series_winner) %>% \r\n  filter(series_winner == 1) %>% # normal dplyr filter\r\n  count(hometown, sort = TRUE)   # normal dplyr count\r\n\r\n\r\n# Source:     lazy query [?? x 2]\r\n# Database:   sqlite 3.33.0\r\n#   [C:\\Personal\\Blog_Vebash\\_posts\\2020-12-12-using-the-tidyverse-with-databases\\data\\great_brit_bakeoff.db]\r\n# Ordered by: desc(n)\r\n  hometown                              n\r\n  <chr>                             <int>\r\n1 Wigan                                 1\r\n2 West Molesey, Surrey                  1\r\n3 Ongar, Essex                          1\r\n4 Market Harborough, Leicestershire     1\r\n5 Leeds / Luton                         1\r\n6 Bradford                              1\r\n7 Barton-Upon-Humber, Lincolnshire      1\r\n8 Barton-Le-Clay, Bedfordshire          1\r\n\r\nLooks like our winners are from very different areas.\r\nHave a look at the SQL behind the scenes\r\nOur dplyr syntax is converted behind the scenes to SQL which is executed directly on the DB table.\r\n\r\n\r\ntbl(con, \"baker_results\") %>% \r\n  select(series, baker, hometown, series_winner) %>% \r\n  filter(series_winner == 1) %>% \r\n  count(hometown, sort = TRUE) %>% \r\n  show_query()\r\n\r\n\r\n<SQL>\r\nSELECT `hometown`, COUNT(*) AS `n`\r\nFROM (SELECT `series`, `baker`, `hometown`, `series_winner`\r\nFROM `baker_results`)\r\nWHERE (`series_winner` = 1.0)\r\nGROUP BY `hometown`\r\nORDER BY `n` DESC\r\n\r\nThat‚Äôs pretty nifty, and helps you learn SQL in the process - it is always good to know, and read SQL, which is used extensively in work and institutional environments.\r\nWhat‚Äôs with this lazy query / ?? we‚Äôre seeing?\r\nYou might have noticed that our pipelines have a:\r\nSource: table [?? x 5] OR\r\nSource: lazy query [?? x 4]\r\nin the output results.\r\nWhy is this?\r\nBehind the scenes the dplyr code we write, gets converted to SQL (the particular dialect of the DB we‚Äôre connecting to).\r\nThe SQL is executed directly on the DB. I.e. the data is not first brought into R and manipulated in R. Instead we send the query to the DB, and the DB does the computation.\r\nWhen we use a dplyr pipeline to execute a query on the DB, the DB does the computation and sends us back a glimpse of the executed end result.\r\nIt is for this reason, we see the ?? - we‚Äôre being told ‚ÄúHey, I executed this query (your pipeline converted to SQL) on the DB at connection con, and here‚Äôs a snippet of the output, but I did not get the meta-info on how many rows were produced, I just know that I got x_number of columns in the output.‚Äù\r\nWe will see in the next part of the tutorial how to get the info into R, and understand how many rows were produced etc.\r\nDone? Remember to disconnect!\r\nGood housekeeping means always remembering to disconnect once you‚Äôre done.\r\n\r\n\r\ndbDisconnect(con) # closes our DB connection\r\n\r\n\r\n\r\nTo see that is indeed the case let‚Äôs see if we can use the connection further ‚Ä¶\r\n\r\n\r\ndbListTables(con)\r\n\r\n\r\nError: Invalid or closed connection\r\n\r\nSlides\r\nIf you‚Äôd like to dive in please check out the slides, and the project on GitHub.\r\n\r\n\r\n\r\n\r\n\r\n\r\nfitvids('.shareagain', {players: 'iframe'});\r\n\r\nStill to come\r\nMore dplyr, for example joining tables.\r\nGetting the data into R.\r\nAcknowledgements\r\nSlide inspiration, as well as some of the background pictures are from Dr.¬†Alison Hill.\r\nThe Great British Bake Off data from Dr.¬†Alison Hill.\r\nEdgar Ruiz‚Äôs database work, and teachings.\r\n\r\n\r\n\r\n",
    "preview": "posts/2020-12-12-using-the-tidyverse-with-databases/data2-unsplash.jpg",
    "last_modified": "2020-12-15T00:46:20+02:00",
    "input_file": {}
  }
]
